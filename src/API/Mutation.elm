-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module API.Mutation exposing (..)

import API.InputObject
import API.Interface
import API.Object
import API.Scalar
import API.Union
import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.Operation exposing (RootMutation)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


{-| Select fields to build up a top-level mutation. The request can be sent with
functions from `Graphqelm.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootMutation
selection constructor =
    Object.selection constructor


createChapter : ({ part : OptionalArgument Int } -> { part : OptionalArgument Int }) -> { number : Int } -> SelectionSet decodesTo API.Object.Chapter -> Field (Maybe decodesTo) RootMutation
createChapter fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { part = Absent }

        optionalArgs =
            [ Argument.optional "part" filledInOptionals.part Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionField "createChapter" (optionalArgs ++ [ Argument.required "number" requiredArgs.number Encode.int ]) object (identity >> Decode.maybe)


createFile : { name : String } -> SelectionSet decodesTo API.Object.File -> Field (Maybe decodesTo) RootMutation
createFile requiredArgs object =
    Object.selectionField "createFile" [ Argument.required "name" requiredArgs.name Encode.string ] object (identity >> Decode.maybe)


createSection : { title : String } -> SelectionSet decodesTo API.Object.Section -> Field (Maybe decodesTo) RootMutation
createSection requiredArgs object =
    Object.selectionField "createSection" [ Argument.required "title" requiredArgs.title Encode.string ] object (identity >> Decode.maybe)


updateChapter : ({ number : OptionalArgument Int, part : OptionalArgument Int } -> { number : OptionalArgument Int, part : OptionalArgument Int }) -> { id : API.Scalar.Id } -> SelectionSet decodesTo API.Object.Chapter -> Field (Maybe decodesTo) RootMutation
updateChapter fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { number = Absent, part = Absent }

        optionalArgs =
            [ Argument.optional "number" filledInOptionals.number Encode.int, Argument.optional "part" filledInOptionals.part Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionField "updateChapter" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(API.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.maybe)


updateFile : ({ name : OptionalArgument String } -> { name : OptionalArgument String }) -> { id : API.Scalar.Id } -> SelectionSet decodesTo API.Object.File -> Field (Maybe decodesTo) RootMutation
updateFile fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { name = Absent }

        optionalArgs =
            [ Argument.optional "name" filledInOptionals.name Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionField "updateFile" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(API.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.maybe)


updateSection : ({ title : OptionalArgument String } -> { title : OptionalArgument String }) -> { id : API.Scalar.Id } -> SelectionSet decodesTo API.Object.Section -> Field (Maybe decodesTo) RootMutation
updateSection fillInOptionals requiredArgs object =
    let
        filledInOptionals =
            fillInOptionals { title = Absent }

        optionalArgs =
            [ Argument.optional "title" filledInOptionals.title Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionField "updateSection" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (\(API.Scalar.Id raw) -> Encode.string raw) ]) object (identity >> Decode.maybe)


updateUser : { id : API.Scalar.Id } -> SelectionSet decodesTo API.Object.User -> Field (Maybe decodesTo) RootMutation
updateUser requiredArgs object =
    Object.selectionField "updateUser" [ Argument.required "id" requiredArgs.id (\(API.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


updateOrCreateChapter : { update : API.InputObject.UpdateChapter, create : API.InputObject.CreateChapter } -> SelectionSet decodesTo API.Object.Chapter -> Field (Maybe decodesTo) RootMutation
updateOrCreateChapter requiredArgs object =
    Object.selectionField "updateOrCreateChapter" [ Argument.required "update" requiredArgs.update API.InputObject.encodeUpdateChapter, Argument.required "create" requiredArgs.create API.InputObject.encodeCreateChapter ] object (identity >> Decode.maybe)


updateOrCreateFile : { update : API.InputObject.UpdateFile, create : API.InputObject.CreateFile } -> SelectionSet decodesTo API.Object.File -> Field (Maybe decodesTo) RootMutation
updateOrCreateFile requiredArgs object =
    Object.selectionField "updateOrCreateFile" [ Argument.required "update" requiredArgs.update API.InputObject.encodeUpdateFile, Argument.required "create" requiredArgs.create API.InputObject.encodeCreateFile ] object (identity >> Decode.maybe)


updateOrCreateSection : { update : API.InputObject.UpdateSection, create : API.InputObject.CreateSection } -> SelectionSet decodesTo API.Object.Section -> Field (Maybe decodesTo) RootMutation
updateOrCreateSection requiredArgs object =
    Object.selectionField "updateOrCreateSection" [ Argument.required "update" requiredArgs.update API.InputObject.encodeUpdateSection, Argument.required "create" requiredArgs.create API.InputObject.encodeCreateSection ] object (identity >> Decode.maybe)


updateOrCreateUser : { update : API.InputObject.UpdateUser } -> SelectionSet decodesTo API.Object.User -> Field (Maybe decodesTo) RootMutation
updateOrCreateUser requiredArgs object =
    Object.selectionField "updateOrCreateUser" [ Argument.required "update" requiredArgs.update API.InputObject.encodeUpdateUser ] object (identity >> Decode.maybe)


deleteChapter : { id : API.Scalar.Id } -> SelectionSet decodesTo API.Object.Chapter -> Field (Maybe decodesTo) RootMutation
deleteChapter requiredArgs object =
    Object.selectionField "deleteChapter" [ Argument.required "id" requiredArgs.id (\(API.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


deleteFile : { id : API.Scalar.Id } -> SelectionSet decodesTo API.Object.File -> Field (Maybe decodesTo) RootMutation
deleteFile requiredArgs object =
    Object.selectionField "deleteFile" [ Argument.required "id" requiredArgs.id (\(API.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


deleteSection : { id : API.Scalar.Id } -> SelectionSet decodesTo API.Object.Section -> Field (Maybe decodesTo) RootMutation
deleteSection requiredArgs object =
    Object.selectionField "deleteSection" [ Argument.required "id" requiredArgs.id (\(API.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


deleteUser : { id : API.Scalar.Id } -> SelectionSet decodesTo API.Object.User -> Field (Maybe decodesTo) RootMutation
deleteUser requiredArgs object =
    Object.selectionField "deleteUser" [ Argument.required "id" requiredArgs.id (\(API.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)


signinUser : ({ auth0 : OptionalArgument API.InputObject.AuthProviderAuth0 } -> { auth0 : OptionalArgument API.InputObject.AuthProviderAuth0 }) -> SelectionSet decodesTo API.Object.SigninPayload -> Field decodesTo RootMutation
signinUser fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { auth0 = Absent }

        optionalArgs =
            [ Argument.optional "auth0" filledInOptionals.auth0 API.InputObject.encodeAuthProviderAuth0 ]
                |> List.filterMap identity
    in
    Object.selectionField "signinUser" optionalArgs object identity


createUser : { authProvider : API.InputObject.AuthProviderSignupData } -> SelectionSet decodesTo API.Object.User -> Field (Maybe decodesTo) RootMutation
createUser requiredArgs object =
    Object.selectionField "createUser" [ Argument.required "authProvider" requiredArgs.authProvider API.InputObject.encodeAuthProviderSignupData ] object (identity >> Decode.maybe)
