-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module API.Subscription exposing (..)

import API.InputObject
import API.Interface
import API.Object
import API.Scalar
import API.Union
import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.Operation exposing (RootSubscription)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


{-| Select fields to build up a top-level mutation. The request can be sent with
functions from `Graphqelm.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootSubscription
selection constructor =
    Object.selection constructor


{-|

  - filter -

-}
chapter : ({ filter : OptionalArgument API.InputObject.ChapterSubscriptionFilter } -> { filter : OptionalArgument API.InputObject.ChapterSubscriptionFilter }) -> SelectionSet decodesTo API.Object.ChapterSubscriptionPayload -> Field (Maybe decodesTo) RootSubscription
chapter fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter API.InputObject.encodeChapterSubscriptionFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "Chapter" optionalArgs object (identity >> Decode.maybe)


{-|

  - filter -

-}
file : ({ filter : OptionalArgument API.InputObject.FileSubscriptionFilter } -> { filter : OptionalArgument API.InputObject.FileSubscriptionFilter }) -> SelectionSet decodesTo API.Object.FileSubscriptionPayload -> Field (Maybe decodesTo) RootSubscription
file fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter API.InputObject.encodeFileSubscriptionFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "File" optionalArgs object (identity >> Decode.maybe)


{-|

  - filter -

-}
section : ({ filter : OptionalArgument API.InputObject.SectionSubscriptionFilter } -> { filter : OptionalArgument API.InputObject.SectionSubscriptionFilter }) -> SelectionSet decodesTo API.Object.SectionSubscriptionPayload -> Field (Maybe decodesTo) RootSubscription
section fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter API.InputObject.encodeSectionSubscriptionFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "Section" optionalArgs object (identity >> Decode.maybe)


{-|

  - filter -

-}
user : ({ filter : OptionalArgument API.InputObject.UserSubscriptionFilter } -> { filter : OptionalArgument API.InputObject.UserSubscriptionFilter }) -> SelectionSet decodesTo API.Object.UserSubscriptionPayload -> Field (Maybe decodesTo) RootSubscription
user fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter API.InputObject.encodeUserSubscriptionFilter ]
                |> List.filterMap identity
    in
    Object.selectionField "User" optionalArgs object (identity >> Decode.maybe)
