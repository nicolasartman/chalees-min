-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module API.Query exposing (..)

import API.Enum.ChapterOrderBy
import API.Enum.FileOrderBy
import API.Enum.SectionOrderBy
import API.Enum.UserOrderBy
import API.InputObject
import API.Interface
import API.Object
import API.Scalar
import API.Union
import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.Operation exposing (RootQuery)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


{-| Select fields to build up a top-level query. The request can be sent with
functions from `Graphqelm.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootQuery
selection constructor =
    Object.selection constructor


{-|

  - filter -
-}
allChapters : ({ filter : OptionalArgument API.InputObject.ChapterFilter, orderBy : OptionalArgument API.Enum.ChapterOrderBy.ChapterOrderBy, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int } -> { filter : OptionalArgument API.InputObject.ChapterFilter, orderBy : OptionalArgument API.Enum.ChapterOrderBy.ChapterOrderBy, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int }) -> SelectionSet decodesTo API.Object.Chapter -> Field (List decodesTo) RootQuery
allChapters fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter API.InputObject.encodeChapterFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum API.Enum.ChapterOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
        Object.selectionField "allChapters" optionalArgs object (identity >> Decode.list)


{-|

  - filter -
-}
allFiles : ({ filter : OptionalArgument API.InputObject.FileFilter, orderBy : OptionalArgument API.Enum.FileOrderBy.FileOrderBy, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int } -> { filter : OptionalArgument API.InputObject.FileFilter, orderBy : OptionalArgument API.Enum.FileOrderBy.FileOrderBy, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int }) -> SelectionSet decodesTo API.Object.File -> Field (List decodesTo) RootQuery
allFiles fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter API.InputObject.encodeFileFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum API.Enum.FileOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
        Object.selectionField "allFiles" optionalArgs object (identity >> Decode.list)


{-|

  - filter -
-}
allSections : ({ filter : OptionalArgument API.InputObject.SectionFilter, orderBy : OptionalArgument API.Enum.SectionOrderBy.SectionOrderBy, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int } -> { filter : OptionalArgument API.InputObject.SectionFilter, orderBy : OptionalArgument API.Enum.SectionOrderBy.SectionOrderBy, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int }) -> SelectionSet decodesTo API.Object.Section -> Field (List decodesTo) RootQuery
allSections fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter API.InputObject.encodeSectionFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum API.Enum.SectionOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
        Object.selectionField "allSections" optionalArgs object (identity >> Decode.list)


{-|

  - filter -
-}
allUsers : ({ filter : OptionalArgument API.InputObject.UserFilter, orderBy : OptionalArgument API.Enum.UserOrderBy.UserOrderBy, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int } -> { filter : OptionalArgument API.InputObject.UserFilter, orderBy : OptionalArgument API.Enum.UserOrderBy.UserOrderBy, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int }) -> SelectionSet decodesTo API.Object.User -> Field (List decodesTo) RootQuery
allUsers fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter API.InputObject.encodeUserFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum API.Enum.UserOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
        Object.selectionField "allUsers" optionalArgs object (identity >> Decode.list)


{-|

  - filter -
-}
allChaptersMeta_ : ({ filter : OptionalArgument API.InputObject.ChapterFilter, orderBy : OptionalArgument API.Enum.ChapterOrderBy.ChapterOrderBy, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int } -> { filter : OptionalArgument API.InputObject.ChapterFilter, orderBy : OptionalArgument API.Enum.ChapterOrderBy.ChapterOrderBy, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int }) -> SelectionSet decodesTo API.Object.QueryMeta_ -> Field decodesTo RootQuery
allChaptersMeta_ fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter API.InputObject.encodeChapterFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum API.Enum.ChapterOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
        Object.selectionField "_allChaptersMeta" optionalArgs object identity


{-|

  - filter -
-}
allFilesMeta_ : ({ filter : OptionalArgument API.InputObject.FileFilter, orderBy : OptionalArgument API.Enum.FileOrderBy.FileOrderBy, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int } -> { filter : OptionalArgument API.InputObject.FileFilter, orderBy : OptionalArgument API.Enum.FileOrderBy.FileOrderBy, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int }) -> SelectionSet decodesTo API.Object.QueryMeta_ -> Field decodesTo RootQuery
allFilesMeta_ fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter API.InputObject.encodeFileFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum API.Enum.FileOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
        Object.selectionField "_allFilesMeta" optionalArgs object identity


{-|

  - filter -
-}
allSectionsMeta_ : ({ filter : OptionalArgument API.InputObject.SectionFilter, orderBy : OptionalArgument API.Enum.SectionOrderBy.SectionOrderBy, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int } -> { filter : OptionalArgument API.InputObject.SectionFilter, orderBy : OptionalArgument API.Enum.SectionOrderBy.SectionOrderBy, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int }) -> SelectionSet decodesTo API.Object.QueryMeta_ -> Field decodesTo RootQuery
allSectionsMeta_ fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter API.InputObject.encodeSectionFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum API.Enum.SectionOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
        Object.selectionField "_allSectionsMeta" optionalArgs object identity


{-|

  - filter -
-}
allUsersMeta_ : ({ filter : OptionalArgument API.InputObject.UserFilter, orderBy : OptionalArgument API.Enum.UserOrderBy.UserOrderBy, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int } -> { filter : OptionalArgument API.InputObject.UserFilter, orderBy : OptionalArgument API.Enum.UserOrderBy.UserOrderBy, skip : OptionalArgument Int, after : OptionalArgument String, before : OptionalArgument String, first : OptionalArgument Int, last : OptionalArgument Int }) -> SelectionSet decodesTo API.Object.QueryMeta_ -> Field decodesTo RootQuery
allUsersMeta_ fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter API.InputObject.encodeUserFilter, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum API.Enum.UserOrderBy.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
        Object.selectionField "_allUsersMeta" optionalArgs object identity


{-|

  - id -
-}
chapter : ({ id : OptionalArgument API.Scalar.Id } -> { id : OptionalArgument API.Scalar.Id }) -> SelectionSet decodesTo API.Object.Chapter -> Field (Maybe decodesTo) RootQuery
chapter fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { id = Absent }

        optionalArgs =
            [ Argument.optional "id" filledInOptionals.id (\(API.Scalar.Id raw) -> Encode.string raw) ]
                |> List.filterMap identity
    in
        Object.selectionField "Chapter" optionalArgs object (identity >> Decode.maybe)


{-|

  - id -
  - secret -
  - url -
-}
file : ({ id : OptionalArgument API.Scalar.Id, secret : OptionalArgument String, url : OptionalArgument String } -> { id : OptionalArgument API.Scalar.Id, secret : OptionalArgument String, url : OptionalArgument String }) -> SelectionSet decodesTo API.Object.File -> Field (Maybe decodesTo) RootQuery
file fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { id = Absent, secret = Absent, url = Absent }

        optionalArgs =
            [ Argument.optional "id" filledInOptionals.id (\(API.Scalar.Id raw) -> Encode.string raw), Argument.optional "secret" filledInOptionals.secret Encode.string, Argument.optional "url" filledInOptionals.url Encode.string ]
                |> List.filterMap identity
    in
        Object.selectionField "File" optionalArgs object (identity >> Decode.maybe)


{-|

  - id -
-}
section : ({ id : OptionalArgument API.Scalar.Id } -> { id : OptionalArgument API.Scalar.Id }) -> SelectionSet decodesTo API.Object.Section -> Field (Maybe decodesTo) RootQuery
section fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { id = Absent }

        optionalArgs =
            [ Argument.optional "id" filledInOptionals.id (\(API.Scalar.Id raw) -> Encode.string raw) ]
                |> List.filterMap identity
    in
        Object.selectionField "Section" optionalArgs object (identity >> Decode.maybe)


{-|

  - auth0UserId -
  - id -
-}
user : ({ auth0UserId : OptionalArgument String, id : OptionalArgument API.Scalar.Id } -> { auth0UserId : OptionalArgument String, id : OptionalArgument API.Scalar.Id }) -> SelectionSet decodesTo API.Object.User -> Field (Maybe decodesTo) RootQuery
user fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { auth0UserId = Absent, id = Absent }

        optionalArgs =
            [ Argument.optional "auth0UserId" filledInOptionals.auth0UserId Encode.string, Argument.optional "id" filledInOptionals.id (\(API.Scalar.Id raw) -> Encode.string raw) ]
                |> List.filterMap identity
    in
        Object.selectionField "User" optionalArgs object (identity >> Decode.maybe)


{-| Fetches an object given its ID

  - id - The ID of an object

-}
node : { id : API.Scalar.Id } -> SelectionSet decodesTo API.Interface.Node -> Field (Maybe decodesTo) RootQuery
node requiredArgs object =
    Object.selectionField "node" [ Argument.required "id" requiredArgs.id (\(API.Scalar.Id raw) -> Encode.string raw) ] object (identity >> Decode.maybe)
